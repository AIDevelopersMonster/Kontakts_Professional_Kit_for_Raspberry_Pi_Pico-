# Video https://youtu.be/drRR_jXd3CI
# Post http://kontakts.ru/showthread.php/40884?p=86166#post86166
from machine import Pin, I2C
import time

# I2C Configuration
clock_pin = 21
data_pin = 20
bus = 0
i2c_addr_left = 0x70

# Initialize I2C
i2c = I2C(bus, sda=Pin(data_pin), scl=Pin(clock_pin))

# Set the display in matrix mode
i2c.writeto(i2c_addr_left, bytearray([0x21]))  # Turn on oscillator
time.sleep(0.1)
i2c.writeto(i2c_addr_left, bytearray([0x81]))  # Display on, blinking off
time.sleep(0.1)

# Define the eyes data
eyes = {
    'straight': [0x3c, 0x7e, 0xff, 0xe7, 0xe7, 0xff, 0x7e, 0x3c],
    'straightX2': [0x3c, 0x7e, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e, 0x3c],
    'straightX3': [0x3c, 0x66, 0xc3, 0x81, 0x81, 0xc3, 0x66, 0x3c],
    'straightX4': [0x3c, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c],
    'straightX2Left1': [0x3c, 0x7e, 0xcf, 0x87, 0x87, 0xcf, 0x7e, 0x3c],
    'straightX2Left2': [0x3c, 0x7e, 0x9f, 0x0f, 0x0f, 0x9f, 0x7e, 0x3c],
    'straightX2Left3': [0x3c, 0x7e, 0x3f, 0x1f, 0x1f, 0x3f, 0x7e, 0x3c],
    'straightX2Left4': [0x3c, 0x7e, 0x7f, 0x3f, 0x3f, 0x7f, 0x7e, 0x3c],
    'straightX2Left5': [0x3c, 0x7e, 0xff, 0x7f, 0x7f, 0xff, 0x7e, 0x3c],
    'straightR2': [0x3c, 0x7e, 0xe7, 0xdb, 0xdb, 0xe7, 0x7e, 0x3c],
    'noEyeball': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'straightBlink1': [0x00, 0x7e, 0xff, 0xe7, 0xe7, 0xff, 0x7e, 0x00],
    'straightBlink2': [0x00, 0x00, 0xff, 0xe7, 0xe7, 0xff, 0x00, 0x00],
    'straightBlink3': [0x00, 0x00, 0x00, 0xe7, 0xe7, 0x00, 0x00, 0x00],
    'straightBlinkLine': [0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],
    'all_off': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    'up1': [0x3c, 0x7e, 0xe7, 0xe7, 0xff, 0xff, 0x7e, 0x3c],
    'up2': [0x3c, 0x66, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'up3': [0x24, 0x66, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'up4': [0x24, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'upLeft': [0x3c, 0x4e, 0xcf, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'upLeft1': [0x3c, 0x7e, 0x9f, 0x9f, 0xff, 0xff, 0x7e, 0x3c],
    'upLeft2': [0x3c, 0x1e, 0x9f, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'upRight1': [0x3c, 0x7e, 0xf9, 0xf9, 0xff, 0xff, 0x7e, 0x3c],
    'upRight': [0x3c, 0x72, 0xf3, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    'down1': [0x3c, 0x7e, 0xff, 0xff, 0xe7, 0xe7, 0x7e, 0x3c],
    'down2': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xe7, 0x66, 0x3c],
    'down3': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xe7, 0x66, 0x3c],
    'down4': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x24],
    'downRight': [0x3c, 0x7e, 0xff, 0xff, 0xf9, 0xf9, 0x7e, 0x3c],
    'downRight1': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xf3, 0x72, 0x3c],
    'downRight2': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xf9, 0x78, 0x3c],
    'downLeft': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xcf, 0x4e, 0x3c],
    'downLeftB': [0x3c, 0x7e, 0xff, 0xff, 0x9f, 0x9f, 0x7e, 0x3c],
    'downLeft1': [0x3c, 0x7e, 0xff, 0xff, 0xcf, 0xcf, 0x7e, 0x3c],
    'downLeft1Blink1': [0x00, 0x7e, 0xff, 0xff, 0xcf, 0xcf, 0x7e, 0x00],
    'downLeft1Blink2': [0x00, 0x00, 0xff, 0xff, 0xcf, 0xcf, 0x00, 0x00],
    'downLeft1Blink3': [0x00, 0x00, 0x00, 0xff, 0xcf, 0x00, 0x00, 0x00],
    'downLeft2': [0x3c, 0x7e, 0xff, 0xff, 0xff, 0x9f, 0x1e, 0x3c],
    'left1': [0x3c, 0x7e, 0xff, 0xcf, 0xcf, 0xff, 0x7e, 0x3c],
    'left2': [0x3c, 0x7e, 0xff, 0x9f, 0x9f, 0xff, 0x7e, 0x3c],
    'left3': [0x3c, 0x7e, 0xff, 0x3f, 0x3f, 0xff, 0x7e, 0x3c],
    'left4': [0x3c, 0x7e, 0xff, 0x7f, 0x7f, 0xff, 0x7e, 0x3c],
    'right1': [0x3c, 0x7e, 0xff, 0xf3, 0xf3, 0xff, 0x7e, 0x3c],
    'right2': [0x3c, 0x7e, 0xff, 0xf9, 0xf9, 0xff, 0x7e, 0x3c],
    'right3': [0x3c, 0x7e, 0xff, 0xfc, 0xfc, 0xff, 0x7e, 0x3c],
    'right4': [0x3c, 0x7e, 0xff, 0xfe, 0xfe, 0xff, 0x7e, 0x3c],
    'ghost1': [0x3c, 0x56, 0x93, 0xdb, 0xff, 0xff, 0xdd, 0x89],
    'ghost2': [0x38, 0x7c, 0x92, 0x92, 0xfe, 0xfe, 0xfe, 0xaa],
    # Add more patterns here...
}

# Function to send data to the display
def send_to_display(data):
    for i in range(8):  # Loop through the 8 rows
        # Write each row's data (byte) to the appropriate register
        i2c.writeto(i2c_addr_left, bytearray([0x00 + (i << 1), data[i]]))  # Row data
        time.sleep(0.01)  # Small delay to ensure proper display update

# Function to show a given eye pattern
def show_eye_pattern(eye_pattern, eye_name):
    print(f"Displaying: {eye_name}")
    send_to_display(eye_pattern)

# Main loop to display various eyes
while True:
    for eye_name, eye_pattern in eyes.items():
        show_eye_pattern(eye_pattern, eye_name)  # Display eye pattern
        time.sleep(1)
