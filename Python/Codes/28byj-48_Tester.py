# Video https://youtu.be/YKpZuzaqmtQ
# Post http://kontakts.ru/showthread.php/40884?p=86177#post86177 
# Обсуждения и поддержка: https://t.me/MrMicroPython
# Импортирование библиотек
from machine import Pin  # Для работы с GPIO пинами микроконтроллера
import time  # Для использования временных задержек

# Инициализация пинов
A_plus = Pin(21, Pin.OUT)  # Пин 21 настроен как выход (для управления A+ мотора)
A_minus = Pin(20, Pin.OUT)  # Пин 20 настроен как выход (для управления A- мотора)
B_plus = Pin(19, Pin.OUT)  # Пин 19 настроен как выход (для управления B+ мотора)
B_minus = Pin(18, Pin.OUT)  # Пин 18 настроен как выход (для управления B- мотора)

# Время задержки между шагами
delay = 1  # Задержка в миллисекундах между каждым шагом (время для мотора)

# Количество шагов, необходимых для одного полного оборота мотора (около 360 градусов)
ROUND_VALUE = 509  # Этот параметр зависит от мотора и его характеристик

# Последовательность шагов для четырехфазного шагового мотора:
# A+ A- B+ B- - это последовательность шагов для управления мотором
STEP_VALUE = [
    [1, 0, 0, 0],  # Шаг 1: A+ включен
    [1, 1, 0, 0],  # Шаг 2: A+ и A- включены
    [0, 1, 0, 0],  # Шаг 3: A- включен
    [0, 1, 1, 0],  # Шаг 4: A- и B+ включены
    [0, 0, 1, 0],  # Шаг 5: B+ включен
    [0, 0, 1, 1],  # Шаг 6: B+ и B- включены
    [0, 0, 0, 1],  # Шаг 7: B- включен
    [1, 0, 0, 1],  # Шаг 8: A+ и B- включены
]

# Функция для сброса значений пинов (выключение мотора)
def reset():
    A_plus(0)  # Отключение A+
    A_minus(0)  # Отключение A-
    B_plus(0)  # Отключение B+
    B_minus(0)  # Отключение B-

# Функция для выполнения шага мотора
# Если count положительное — вращение по часовой стрелке, если отрицательное — против часовой стрелки
def step_run(count):
    direction = 1     # Направление вращения по умолчанию - по часовой стрелке
    if count < 0:
        direction = -1  # Если count отрицательное, вращение против часовой стрелки
        count = -count  # Преобразование count в положительное число
    for x in range(count):  # Повторение шагов на количество раз, равное count
        for bit in STEP_VALUE[::direction]:  # Перебор шагов в указанном направлении
            A_plus(bit[0])  # Установка состояния A+
            A_minus(bit[1])  # Установка состояния A-
            B_plus(bit[2])  # Установка состояния B+
            B_minus(bit[3])  # Установка состояния B-
            time.sleep_ms(delay)  # Задержка после выполнения одного шага
    reset()  # После выполнения шагов сбрасываем пины, чтобы остановить мотор

# Функция для поворота мотора на заданный угол
# a — угол в градусах, если a положительное - по часовой стрелке, если отрицательное - против часовой
def step_angle(a):
    step_run(int(ROUND_VALUE * a / 360))  # Преобразование угла в количество шагов

# Основной цикл, который выполняет повороты мотора
while True:
    step_run(509)  # Один полный оборот по часовой стрелке (по умолчанию)
    step_run(-509)  # Один полный оборот против часовой стрелки
    step_angle(360)  # Один оборот по часовой стрелке
    step_angle(-360)  # Один оборот против часовой стрелки
