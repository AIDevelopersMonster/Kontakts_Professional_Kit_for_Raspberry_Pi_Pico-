# Video https://youtu.be/Gk0SUBNfRfs
# Post http://kontakts.ru/showthread.php/40884?p=86133#post86133
import utime
from machine import Pin, PWM

# Настройка пинов для RGB-светодиодов
Led_R = PWM(Pin(4))   # Красный светодиод подключен к пину 4
Led_G = PWM(Pin(3))   # Зеленый светодиод подключен к пину 3
Led_B = PWM(Pin(2))   # Синий светодиод подключен к пину 2

# Настройка пина для пассивного зуммера
buzzer = PWM(Pin(12)) # Пассивный зуммер подключен к пину 12

# Настройка пина для кнопки с подтягивающим резистором
button = Pin(14, Pin.IN, Pin.PULL_UP)  # Кнопка подключена к пину 14

# Настройка частоты ШИМ для светодиодов (2 кГц)
Led_R.freq(2000)
Led_G.freq(2000)
Led_B.freq(2000)

# Устанавливаем начальную громкость для зуммера
buzzer.duty_u16(1000)  # На 16-битной шкале громкости это значение соответствует средней громкости

# Переменная для отслеживания состояния (сирена включена или выключена)
siren_on = False  # Если True, сирена и мигание включены, если False - выключены

# Переменная для отслеживания времени последнего нажатия
last_button_time = 0
debounce_delay = 300  # Задержка для антидребезга в миллисекундах

# Функция для полицейской сирены
def police_siren():
    for _ in range(5):  # Повторим 5 раз для демонстрации эффекта
        # Низкая частота сирены с красным светом
        buzzer.freq(1000)  # Низкая частота сирены
        Led_R.duty_u16(65535)  # Включаем красный светодиод
        Led_G.duty_u16(0)  # Выключаем зеленый светодиод
        Led_B.duty_u16(0)  # Выключаем синий светодиод
        utime.sleep_ms(500)  # Пауза на 500 миллисекунд
        
        # Высокая частота сирены с синим светом
        buzzer.freq(1500)  # Высокая частота сирены
        Led_R.duty_u16(0)  # Выключаем красный светодиод
        Led_G.duty_u16(0)  # Выключаем зеленый светодиод
        Led_B.duty_u16(65535)  # Включаем синий светодиод
        utime.sleep_ms(500)  # Пауза на 500 миллисекунд

    # После выполнения сирены выключаем все
    buzzer.deinit()  # Отключаем зуммер (выключаем PWM)
    Led_R.duty_u16(0)   # Выключаем красный светодиод
    Led_G.duty_u16(0)   # Выключаем зеленый светодиод
    Led_B.duty_u16(0)   # Выключаем синий светодиод

# Функция-обработчик прерывания
def button_handler(pin):
    global siren_on, last_button_time  # Используем глобальную переменную для изменения состояния
    current_time = utime.ticks_ms()  # Получаем текущее время в миллисекундах
    if utime.ticks_diff(current_time, last_button_time) > debounce_delay:  # Проверяем, прошло ли достаточно времени с последнего нажатия
        siren_on = not siren_on  # Переключаем состояние сирены
        print("Siren toggled:", "ON" if siren_on else "OFF")
        last_button_time = current_time  # Обновляем время последнего нажатия

# Настройка прерывания для кнопки
button.irq(trigger=Pin.IRQ_FALLING, handler=button_handler)  # Прерывание на падение сигнала (кнопка нажата)

# Главная функция
if __name__ == '__main__':
    while True:
        if siren_on:
            police_siren()  # Запускаем сирену, если включена
            utime.sleep_ms(2000)  # Задержка после выполнения сирены, чтобы не запускалась сразу снова

        # Если сирена выключена, просто делаем паузу
        else:
            # Выключаем все (светодиоды и зуммер)
            Led_R.duty_u16(0)    # Выключаем красный светодиод
            Led_G.duty_u16(0)    # Выключаем зеленый светодиод
            Led_B.duty_u16(0)    # Выключаем синий светодиод
            utime.sleep_ms(100)  # Задержка перед следующей проверкой
